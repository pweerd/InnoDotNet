; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Test"
#define MyAppVersion "1.5"
#define MyAppPublisher "My Company, Inc."
#define MyAppExeName "MyProg.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{97AA40BB-5367-488B-9374-0173CA3EB49B}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
DefaultDirName={autopf}\{#MyAppName}
DisableDirPage=yes
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
PrivilegesRequired=lowest
OutputBaseFilename=mysetup
Compression=lzma
SolidCompression=yes
WizardStyle=classic
DisableWelcomePage=no
OutputDir=output
SetupLogging=yes


[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "C:\Program Files (x86)\Inno Setup 6\Examples\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\InnoCom\bin\Debug\net6.0\win-x86\*.dll"; DestDir: "{tmp}"; Flags: dontcopy
Source: "..\InnoCom\bin\Debug\net6.0\win-x86\*.pdb"; DestDir: "{tmp}"; Flags: dontcopy
Source: "..\InnoCom\bin\Debug\net6.0\win-x86\InnoCom.runtimeconfig.json"; DestDir: "{tmp}"; Flags: dontcopy

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"

[Code]

Type

IClassFactory = interface(IUnknown)
'{00000001-0000-0000-C000-000000000046}'
   function CreateInstance(outer: IUnknown; var iid: TGuid; var obj: IUnknown): HResult;
   function LockerServer(lock: integer): HResult;
end;

var sharpExt: Variant;

function DllGetClassObject (var clsid, iid: TGuid; var obj: IClassFactory): Integer;
         external 'DllGetClassObject@{tmp}\InnoCom.comhost.dll stdcall delayload';
function GetModuleHandle(name: String): Integer;
         external 'GetModuleHandleW@kernel32.dll stdcall delayload';
function FreeLibrary(inst: Integer): Integer;
         external 'FreeLibrary@kernel32.dll stdcall delayload';

procedure oleCheck2 (rc: integer; what: String);
begin
   if rc=0 then exit;
   RaiseException (Format ('%s failed: rc=0x%X, err=%s', [what, rc, SysErrorMessage(rc)]));
end;






function createDotnetRootObject: Variant;
var
    vd: IDispatch;
    vc: IClassFactory;
    rc: integer;
    clsid, iid_Unknown, iid_ClassFactory: TGuid;
    vu: IUnknown;
begin
  clsid := StringToGUID('{1E5C0354-FD92-4C3A-8D93-28FAB41A6CBA}'); 
  iid_ClassFactory   := StringToGUID('{00000001-0000-0000-C000-000000000046}');
  iid_Unknown   := StringToGUID('{00000000-0000-0000-C000-000000000046}');
  rc :=  DllGetClassObject(clsid, iid_ClassFactory, vc);
  if rc <> 0 then oleCheck2(rc, 'DllGetClassObject (for extension)');

  rc := vc.CreateInstance(nil, iid_Unknown, vu);
  if rc <> 0 then oleCheck2(rc, 'CreateInstance (for extension)');

  vd := vu as IDispatch;
  result := vd;
end;

procedure initExtension;
var rc: integer;
    s: String;
begin
  ExtractTemporaryFile('InnoCom.ComHost.dll');
  ExtractTemporaryFile('innocom.dll');
  ExtractTemporaryFile('innocom.pdb');
  ExtractTemporaryFile('InnoCom.runtimeconfig.json');
  sharpExt := createDotnetRootObject;
  rc := sharpExt.get42;
  MsgBox('rc from c#: ' + intTostr(rc), mbConfirmation, MB_OK);

  try
    s := sharpExt.MethodWithException('no exception should be generated');
    Log (s);

    //Exceptions work as well...
    s := sharpExt.MethodWithException('');
    Log (s);
  except
    Log ('GOT exception: ' + GetExceptionMessage);
  end
end;

procedure deinitExtension;
var i, h: integer;
begin
  try
    sharpExt.Close();
    Log ('Closed extension');
  except
    Log ('GOT exception while closing extension: ' + GetExceptionMessage);
  end
  sharpExt := 0;

  //Force to unload, otherwise Inno cannot delete the temp.dir
  for i:=0 to 10 do begin
    h:= GetModuleHandle('InnoCom.dll');
    if h=0 then break;
    FreeLibrary(h);
  end;
end;

function InitializeSetup: Boolean;
begin
  result := true;                                    
  initExtension;
end;

procedure DeinitializeSetup;
begin
  deinitExtension;
end;

